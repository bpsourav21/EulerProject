(*
    Project Euler #12

    Highly divisible triangular number
    --------------------

    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be: 
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...    
    Let us list the factors of the first seven triangle numbers:
     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors.   
    What is the value of the first triangle number to have over five hundred divisors?
*)

open System

let factors n = 
    [for i in 1..( int ( sqrt ( float n ) ) ) do
        if n % i = 0 then
            yield i
            if i <> n / i then yield n / i
    ]   

let triangleNumber num =
    [1..num]
    |> List.sum

let getFirstTriangleNumber ( checkNum: int ) =
    let rec checkTriangleNumberLooping n =
        if ( factors ( triangleNumber n ) ).Length < checkNum then
            checkTriangleNumberLooping ( n + 1 )
        else triangleNumber n
    checkTriangleNumberLooping 1

Console.WriteLine( "Enter Num of divisor :" )
let input =
    Console.ReadLine()
    |> Convert.ToInt32

printfn "First triangle number to have over %d divisors is %d" input ( getFirstTriangleNumber input )